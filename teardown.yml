---
- name: In-Memory Inventory
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    guid: "{{ lookup('ENV','GUID') }}"
    home: "{{ lookup('ENV','HOME') }}"
    internal_domain: "example.com"
  tasks:
    - name: Collection instance info
      os_server_info:
        cloud: "{{ guid }}-project"
      register: instances

    - name: Build In-Memory inventory db
      add_host:
        host: "{{ instance.name }}.{{ internal_domain }}"
        group: "{{ instance.metadata.AnsibleGroup }}"
        ansible_host: "{{ instance.private_v4 }}"
        ssh_private_key_file: "{{ home }}/.ssh/{{ guid }}key.pem"
      when: instance.metadata.AnsibleGroup == "database_servers"
      loop: "{{ instances.openstack_servers }}"
      loop_control:
        loop_var: instance
    - name: Build In-Memory inventory backend
      add_host:
        host: "{{ instance.name }}.{{ internal_domain }}"
        group: "{{ instance.metadata.AnsibleGroup }}"
        ansible_host: "{{ instance.private_v4 }}"
        ssh_private_key_file: "{{ home }}/.ssh/{{ guid }}key.pem"
      when: instance.metadata.AnsibleGroup == "app_servers"
      loop: "{{ instances.openstack_servers }}"
      loop_control:
        loop_var: instance

    - name: Build In-Memory inventory backend
      add_host:
        host: "{{ instance.name }}.{{ internal_domain }}"
        group: "{{ instance.metadata.AnsibleGroup }}"
        ansible_host: "{{ instance.private_v4 }}"
        ssh_private_key_file: "{{ home }}/.ssh/{{ guid }}key.pem"
      when: instance.metadata.AnsibleGroup == "load_balancers"
      loop: "{{ instances.openstack_servers }}"
      loop_control:
        loop_var: instance



- name: Gather database facts
  hosts: database_servers
  gather_facts: true

- name: Gather web facts
  hosts: app_servers
  gather_facts: true

- name: Gather app facts
  hosts: load_balancers
  gather_facts: true

- name: Teardown Postgres 12
  hosts: database_servers
  become: true
  gather_facts: false
  vars:
    postgres_rhel8_repo: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    postgres_packages:
      - postgresql12 
      - postgresql12-server 
      - postgresql12-contrib 
      - postgresql12-libs
    postgres_library: "python3-psycopg2"
    postgres_10_data_dir: /var/lib/pgsql/12/data
    postgres_port: 5432

  tasks:

    - name: Remove Postgres packages
      package:
        name: "{{ __package }}"
        state: absent
      loop: 
#        - "{{ postgres_rhel8_repo }}"        
        - "{{ postgres_library }}"
        - "{{ postgres_packages }}"
      loop_control:
        loop_var: __package

    - name: Remove Postgres 12 data directory
      file:
        path: /var/lib/pgsql/12
        state: absent

    - name: Remove Postgres user
      user:
        name: postgres
        state: absent

- name: Teardown app_servers flask configuration
  hosts: backend_servers
  become: true
  gather_facts: false
  tags:
    - application_servers
  vars:
    flask_app_name: resource_hub
    flask_user: flask
    flask_home: /opt/
    flask_repo: https://github.com/tonykay/resource_hub.git  
    flask_scm_ref: main  
    flask_app_lauch_script: /usr/local/bin/launch_resource_hub   
    virtualenv_name: "venv-{{ flask_app_name }}"  
    virtualenv_home: /opt/virtual_envs
    virtualenv_python: /usr/bin/python3

    app_yum_packages:
      - autoconf
      - automake
      - git
      - gcc
      - libtool
      - python3
      - python3-devel
      - python3-pip

    pip_dependencies: []
      #      - virtualenv
      # - pip  
      # - psycopg2-binary

  tasks:

    - name: Clean up service when it exists
      block:

        - name: Check if systemd flask app service file exists
          stat:
            path: "/etc/systemd/system/{{ flask_app_name }}.service"
          register: r_flask_service

        - when: r_flask_service.stat.exists
          name: Systemd configuration needs stopped and removed
          block:

            - name: Stop systemd flask app service
              service: 
                name: "{{ flask_app_name }}.service"
                state: stopped
                enabled: no
#              ignore_errors: yes

            - name: Remove systemd flask app service file
              file:
                path: "{{ __path }}"
                state: absent
              loop:
                - "/etc/systemd/system/{{ flask_app_name }}.service"
                -  /usr/local/bin/launch_resource_hub   
              loop_control:
                loop_var: __path

    - name: Remove pre-requisite pip3 packages
      pip:
        name: "{{ pip_dependencies }}"
        state: absent
        executable: /usr/bin/pip
          #      ignore_errors: yes

    - name: Remove flask user
      user:
        name: "{{ flask_user }}"
        state: absent

    - name: Remove app yum packages
      package:
        name: "{{ __package }}"
        state: absent
      loop: "{{ app_yum_packages }}"        
      loop_control:
        loop_var: __package

    - name: Remove flask repo and virtualenv
      file:
        path: "{{ __path }}"
        state: absent
      loop:
        -  "{{ flask_home }}/{{ flask_app_name }}"
        -  "{{ virtualenv_home }}/{{ flask_app_name }}"
      loop_control:
        loop_var: __path

- name: Teardown haproxy load balancer
  hosts: load_balancers
  gather_facts: false 
  become: true

  vars:
    load_balancer_packages:
      - haproxy

  tags:
    - load_balancers

  tasks:

    - name: Remove load balancer packages
      package:
        name: "{{ load_balancer_packages }}"
        state: absent

#    - name: configure haproxy
#      file:
#        path: /etc/haproxy/haproxy.cfg
#        state: absent

- name: Teardown app_servers flask configuration
  hosts: app_servers
  become: true
  gather_facts: false
  tags:
    - application_servers
  vars:
    flask_app_name: resource_hub
    flask_user: flask
    flask_home: /opt/
    flask_repo: https://github.com/tonykay/resource_hub.git  
    flask_scm_ref: main  
    flask_app_lauch_script: /usr/local/bin/launch_resource_hub   
    virtualenv_name: "venv-{{ flask_app_name }}"  
    virtualenv_home: /opt/virtual_envs
    virtualenv_python: /usr/bin/python3

    app_yum_packages:
      - autoconf
      - automake
      - git
      - gcc
      - libtool
      - python3
      - python3-devel
      - python3-pip

    pip_dependencies: []
      #      - virtualenv
      # - pip  
      # - psycopg2-binary

  tasks:

    - name: Clean up service when it exists
      block:

        - name: Check if systemd flask app service file exists
          stat:
            path: "/etc/systemd/system/{{ flask_app_name }}.service"
          register: r_flask_service

        - when: r_flask_service.stat.exists
          name: Systemd configuration needs stopped and removed
          block:

            - name: Stop systemd flask app service
              service: 
                name: "{{ flask_app_name }}.service"
                state: stopped
                enabled: no
#              ignore_errors: yes

            - name: Remove systemd flask app service file
              file:
                path: "{{ __path }}"
                state: absent
              loop:
                - "/etc/systemd/system/{{ flask_app_name }}.service"
                -  /usr/local/bin/launch_resource_hub   
              loop_control:
                loop_var: __path

    - name: Remove pre-requisite pip3 packages
      pip:
        name: "{{ pip_dependencies }}"
        state: absent
        executable: /usr/bin/pip
          #      ignore_errors: yes

    - name: Remove flask user
      user:
        name: "{{ flask_user }}"
        state: absent

    - name: Remove app yum packages
      package:
        name: "{{ __package }}"
        state: absent
      loop: "{{ app_yum_packages }}"        
      loop_control:
        loop_var: __package

    - name: Remove flask repo and virtualenv
      file:
        path: "{{ __path }}"
        state: absent
      loop:
        -  "{{ flask_home }}/{{ flask_app_name }}"
        -  "{{ virtualenv_home }}/{{ flask_app_name }}"
      loop_control:
        loop_var: __path


